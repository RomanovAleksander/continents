{"version":3,"sources":["query/continents.js","context/ContinentsContext.jsx","query/countries.js","components/Languages/Languages.js","components/Countries/Country.js","components/Countries/Countries.js","components/Continents/Continent.js","components/Continents/Continents.js","components/App/App.js","index.js"],"names":["GET_CONTINENTS","gql","ContinentsContext","React","createContext","GET_COUNTRIES","Languages","languages","useContext","setCountries","setEnabled","map","language","onClick","name","code","Country","country","useState","showLanguages","setShowLanguages","Countries","countries","Continent","continent","enabled","data","useQuery","variables","useEffect","a","continents","length","Provider","value","Continents","App","setContinents","loading","error","className","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8NAEaA,EAAiBC,YAAH,iS,iCCAdC,EAAoBC,IAAMC,gBCA1BC,EAAgBJ,YAAH,gW,OCCbK,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1B,EAAqCC,qBAAWN,GAAxCO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAEtB,OACE,6BACGH,EAAUI,KAAI,SAACC,GAAD,OACX,oBAAwBC,QAAS,WAC/BJ,EAAa,IACbC,GAAW,IAFb,SAIGE,EAASE,MAJHF,EAASG,YCNfC,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChBH,EAAoBG,EAApBH,KAAMP,EAAcU,EAAdV,UACd,EAA0CW,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACE,qCACE,oBAAIP,QAAS,kBAAMO,GAAkBD,IAArC,SAAsDL,IACrDK,GAAiB,cAAC,EAAD,CAAWZ,UAAWA,QCPjCc,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1B,OACE,6BACGA,EAAUX,KAAI,SAACM,GAAD,OACX,cAAC,EAAD,CAA4BA,QAASA,GAAvBA,EAAQF,YCDnBQ,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClBV,EAAeU,EAAfV,KAAMC,EAASS,EAATT,KACd,EAAkCG,mBAAS,IAA3C,mBAAOI,EAAP,KAAkBb,EAAlB,KACA,EAA8BN,IAAMe,UAAS,GAA7C,mBAAOO,EAAP,KAAgBf,EAAhB,KACQgB,EAASC,YAAStB,EAAe,CAACuB,UAAW,CAAEb,UAA/CW,KAMR,OAJAG,oBAAS,sBAAC,sBAAAC,EAAA,sDACErB,EAAVgB,EAAuBC,EAAKK,WAAW,GAAGT,UAA0B,IAD5D,2CAEP,CAACG,IAGF,qCACE,oBAAIZ,QAAS,kBAAMH,GAAYe,IAA/B,SAA0CX,MACvCQ,EAAUU,QACX,cAAC9B,EAAkB+B,SAAnB,CAA4BC,MAAO,CAAExB,aAAYD,gBAAjD,SACE,cAAC,EAAD,CAAWa,UAAWA,UClBnBa,EAAa,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,WAC3B,OACE,6BACGA,EAAWpB,KAAI,SAACa,GAAD,OACZ,cAAC,EAAD,CAAWA,UAAWA,GAAgBA,EAAUT,YCuB3CqB,EAzBH,WACV,MAAoClB,mBAAS,IAA7C,mBAAOa,EAAP,KAAmBM,EAAnB,KACA,EAAiCV,YAAS3B,GAAlC0B,EAAR,EAAQA,KAAMY,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAQvB,OANAV,qBAAU,WACHS,GACHD,EAAcX,EAAKK,cAEpB,CAACL,IAEAY,EACK,mBAAGE,UAAU,UAAb,wBAGLD,EACK,mBAAGC,UAAU,QAAb,2CAIP,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CAAYT,WAAYA,OCnBxBU,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,OAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.9787da37.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_CONTINENTS = gql`\r\n    query GetContinents {\r\n        continents {\r\n            name\r\n            code\r\n            countries {\r\n                name\r\n                code\r\n                languages {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\n\nexport const ContinentsContext = React.createContext();\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_COUNTRIES = gql`\r\n    query GetCountries($code: String!) {\r\n        continents(filter: { code: { eq: $code } }) {\r\n            countries {\r\n                name\r\n                code\r\n                capital\r\n                languages {\r\n                    name\r\n                    code\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, { useContext } from 'react';\r\nimport { ContinentsContext } from '../../context/ContinentsContext';\r\n\r\nexport const Languages = ({ languages }) => {\r\n  const { setCountries, setEnabled } = useContext(ContinentsContext);\r\n\r\n  return (\r\n    <ul>\r\n      {languages.map((language) => (\r\n          <li key={language.code} onClick={() => {\r\n            setCountries([]);\r\n            setEnabled(false);\r\n          }}>\r\n            {language.name}\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Languages } from '../Languages/Languages';\r\n\r\nexport const Country = ({ country }) => {\r\n  const { name, languages } = country;\r\n  const [showLanguages, setShowLanguages] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      <li onClick={() => setShowLanguages(!showLanguages)}>{name}</li>\r\n      {showLanguages && <Languages languages={languages} />}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {Country} from './Country';\r\n\r\nexport const Countries = ({ countries }) => {\r\n  return (\r\n    <ul>\r\n      {countries.map((country) => (\r\n          <Country key={country.code} country={country} />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ContinentsContext } from '../../context/ContinentsContext';\r\nimport { GET_COUNTRIES } from '../../query/countries';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Countries } from '../Countries/Countries';\r\n\r\nexport const Continent = ({ continent }) => {\r\n  const { name, code } = continent;\r\n  const [countries, setCountries] = useState([]);\r\n  const [enabled, setEnabled] = React.useState(false);\r\n  const { data } = useQuery(GET_COUNTRIES, {variables: { code }});\r\n\r\n  useEffect(async () => {\r\n    enabled ? setCountries(data.continents[0].countries) : setCountries([]);\r\n  }, [enabled]);\r\n\r\n  return (\r\n    <>\r\n      <li onClick={() => setEnabled(!enabled)}>{name}</li>\r\n      {!!countries.length && (\r\n        <ContinentsContext.Provider value={{ setEnabled, setCountries }}>\r\n          <Countries countries={countries} />\r\n        </ContinentsContext.Provider>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Continent } from './Continent';\r\n\r\nexport const Continents = ({ continents }) => {\r\n  return (\r\n    <ul>\r\n      {continents.map((continent) => (\r\n          <Continent continent={continent} key={continent.code} />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\nimport { GET_CONTINENTS } from '../../query/continents';\nimport { useQuery } from '@apollo/client';\nimport { Continents } from '../Continents/Continents';\n\nconst App = () => {\n  const [continents, setContinents] = useState([]);\n  const { data, loading, error } = useQuery(GET_CONTINENTS);\n\n  useEffect(() => {\n    if (!loading) {\n      setContinents(data.continents);\n    }\n  }, [data])\n\n  if (loading) {\n    return <p className=\"loading\">Loading...</p>\n  }\n\n  if (error) {\n    return <p className=\"error\">Oops, Something went wrong...</p>\n  }\n\n  return (\n    <div className=\"list-container\">\n      <Continents continents={continents}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport App from './components/App/App';\nimport './index.css';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}